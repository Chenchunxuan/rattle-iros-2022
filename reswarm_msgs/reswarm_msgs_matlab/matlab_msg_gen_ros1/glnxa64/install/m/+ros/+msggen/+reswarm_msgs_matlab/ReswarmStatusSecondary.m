
classdef ReswarmStatusSecondary < ros.Message
    %ReswarmStatusSecondary MATLAB implementation of reswarm_msgs_matlab/ReswarmStatusSecondary
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'reswarm_msgs_matlab/ReswarmStatusSecondary' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '758d13e0328708709b74b234c19edbd1' % The MD5 Checksum of the message definition
        PropertyList = { 'Stamp' 'TestNumber' 'DefaultControl' 'FlightMode' 'TestFinished' 'CoordOk' 'SolverStatus' 'CostValue' 'KktValue' 'SolTime' } % List of non-constant message properties
        ROSPropertyList = { 'stamp' 'test_number' 'default_control' 'flight_mode' 'test_finished' 'coord_ok' 'solver_status' 'cost_value' 'kkt_value' 'sol_time' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Stamp
        TestNumber
        DefaultControl
        FlightMode
        TestFinished
        CoordOk
        SolverStatus
        CostValue
        KktValue
        SolTime
    end
    methods
        function set.Stamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'Stamp')
            obj.Stamp = val;
        end
        function set.TestNumber(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'TestNumber');
            obj.TestNumber = int32(val);
        end
        function set.DefaultControl(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'DefaultControl');
            obj.DefaultControl = logical(val);
        end
        function set.FlightMode(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'FlightMode');
            obj.FlightMode = char(val);
        end
        function set.TestFinished(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'TestFinished');
            obj.TestFinished = logical(val);
        end
        function set.CoordOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'CoordOk');
            obj.CoordOk = logical(val);
        end
        function set.SolverStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'SolverStatus');
            obj.SolverStatus = int32(val);
        end
        function set.CostValue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'CostValue');
            obj.CostValue = single(val);
        end
        function set.KktValue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'KktValue');
            obj.KktValue = single(val);
        end
        function set.SolTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ReswarmStatusSecondary', 'SolTime');
            obj.SolTime = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.reswarm_msgs_matlab.ReswarmStatusSecondary.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.reswarm_msgs_matlab.ReswarmStatusSecondary(strObj);
        end
    end
end
