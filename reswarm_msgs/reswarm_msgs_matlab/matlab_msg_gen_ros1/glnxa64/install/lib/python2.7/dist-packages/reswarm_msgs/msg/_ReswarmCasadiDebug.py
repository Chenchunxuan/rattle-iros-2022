# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reswarm_msgs/ReswarmCasadiDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ReswarmCasadiDebug(genpy.Message):
  _md5sum = "71a2da2130cb8705dacf80ff5c94f1b9"
  _type = "reswarm_msgs/ReswarmCasadiDebug"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header  # header with time stamp
geometry_msgs/Wrench wrench  # force and torque
geometry_msgs/Point u0_mpc  # nominal mpc computation
geometry_msgs/Point u0_dr  # disturbance rejection computation
std_msgs/Float64MultiArray x_nom  # selected x0
geometry_msgs/Vector3 accel  # linear acceleration (wrench w/out estimated mass)
std_msgs/Float64 casadi_comp_time
std_msgs/Float64 total_comp_time
std_msgs/String control_mode
std_msgs/String state_mode

# gains
float64 Q_pos_factor
float64 Q_vel_factor
float64 R_factor
float64 QN_pos_factor
float64 QN_vel_factor

float64 Q_pos_tube_factor
float64 Q_vel_tube_factor
float64 R_tube_factor
float64 QN_pos_tube_factor
float64 QN_vel_tube_factor

float64 Q_pos_anc_factor
float64 Q_vel_anc_factor
float64 R_anc_factor

# timing info
float64 T
int32 N
float64 control_dt

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/Float64MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float64[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['header','wrench','u0_mpc','u0_dr','x_nom','accel','casadi_comp_time','total_comp_time','control_mode','state_mode','Q_pos_factor','Q_vel_factor','R_factor','QN_pos_factor','QN_vel_factor','Q_pos_tube_factor','Q_vel_tube_factor','R_tube_factor','QN_pos_tube_factor','QN_vel_tube_factor','Q_pos_anc_factor','Q_vel_anc_factor','R_anc_factor','T','N','control_dt']
  _slot_types = ['std_msgs/Header','geometry_msgs/Wrench','geometry_msgs/Point','geometry_msgs/Point','std_msgs/Float64MultiArray','geometry_msgs/Vector3','std_msgs/Float64','std_msgs/Float64','std_msgs/String','std_msgs/String','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,wrench,u0_mpc,u0_dr,x_nom,accel,casadi_comp_time,total_comp_time,control_mode,state_mode,Q_pos_factor,Q_vel_factor,R_factor,QN_pos_factor,QN_vel_factor,Q_pos_tube_factor,Q_vel_tube_factor,R_tube_factor,QN_pos_tube_factor,QN_vel_tube_factor,Q_pos_anc_factor,Q_vel_anc_factor,R_anc_factor,T,N,control_dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReswarmCasadiDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.u0_mpc is None:
        self.u0_mpc = geometry_msgs.msg.Point()
      if self.u0_dr is None:
        self.u0_dr = geometry_msgs.msg.Point()
      if self.x_nom is None:
        self.x_nom = std_msgs.msg.Float64MultiArray()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.casadi_comp_time is None:
        self.casadi_comp_time = std_msgs.msg.Float64()
      if self.total_comp_time is None:
        self.total_comp_time = std_msgs.msg.Float64()
      if self.control_mode is None:
        self.control_mode = std_msgs.msg.String()
      if self.state_mode is None:
        self.state_mode = std_msgs.msg.String()
      if self.Q_pos_factor is None:
        self.Q_pos_factor = 0.
      if self.Q_vel_factor is None:
        self.Q_vel_factor = 0.
      if self.R_factor is None:
        self.R_factor = 0.
      if self.QN_pos_factor is None:
        self.QN_pos_factor = 0.
      if self.QN_vel_factor is None:
        self.QN_vel_factor = 0.
      if self.Q_pos_tube_factor is None:
        self.Q_pos_tube_factor = 0.
      if self.Q_vel_tube_factor is None:
        self.Q_vel_tube_factor = 0.
      if self.R_tube_factor is None:
        self.R_tube_factor = 0.
      if self.QN_pos_tube_factor is None:
        self.QN_pos_tube_factor = 0.
      if self.QN_vel_tube_factor is None:
        self.QN_vel_tube_factor = 0.
      if self.Q_pos_anc_factor is None:
        self.Q_pos_anc_factor = 0.
      if self.Q_vel_anc_factor is None:
        self.Q_vel_anc_factor = 0.
      if self.R_anc_factor is None:
        self.R_anc_factor = 0.
      if self.T is None:
        self.T = 0.
      if self.N is None:
        self.N = 0
      if self.control_dt is None:
        self.control_dt = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.wrench = geometry_msgs.msg.Wrench()
      self.u0_mpc = geometry_msgs.msg.Point()
      self.u0_dr = geometry_msgs.msg.Point()
      self.x_nom = std_msgs.msg.Float64MultiArray()
      self.accel = geometry_msgs.msg.Vector3()
      self.casadi_comp_time = std_msgs.msg.Float64()
      self.total_comp_time = std_msgs.msg.Float64()
      self.control_mode = std_msgs.msg.String()
      self.state_mode = std_msgs.msg.String()
      self.Q_pos_factor = 0.
      self.Q_vel_factor = 0.
      self.R_factor = 0.
      self.QN_pos_factor = 0.
      self.QN_vel_factor = 0.
      self.Q_pos_tube_factor = 0.
      self.Q_vel_tube_factor = 0.
      self.R_tube_factor = 0.
      self.QN_pos_tube_factor = 0.
      self.QN_vel_tube_factor = 0.
      self.Q_pos_anc_factor = 0.
      self.Q_vel_anc_factor = 0.
      self.R_anc_factor = 0.
      self.T = 0.
      self.N = 0
      self.control_dt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12d().pack(_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.u0_mpc.x, _x.u0_mpc.y, _x.u0_mpc.z, _x.u0_dr.x, _x.u0_dr.y, _x.u0_dr.z))
      length = len(self.x_nom.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.x_nom.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.x_nom.layout.data_offset))
      length = len(self.x_nom.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.x_nom.data))
      _x = self
      buff.write(_get_struct_5d().pack(_x.accel.x, _x.accel.y, _x.accel.z, _x.casadi_comp_time.data, _x.total_comp_time.data))
      _x = self.control_mode.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state_mode.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_14did().pack(_x.Q_pos_factor, _x.Q_vel_factor, _x.R_factor, _x.QN_pos_factor, _x.QN_vel_factor, _x.Q_pos_tube_factor, _x.Q_vel_tube_factor, _x.R_tube_factor, _x.QN_pos_tube_factor, _x.QN_vel_tube_factor, _x.Q_pos_anc_factor, _x.Q_vel_anc_factor, _x.R_anc_factor, _x.T, _x.N, _x.control_dt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.u0_mpc is None:
        self.u0_mpc = geometry_msgs.msg.Point()
      if self.u0_dr is None:
        self.u0_dr = geometry_msgs.msg.Point()
      if self.x_nom is None:
        self.x_nom = std_msgs.msg.Float64MultiArray()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.casadi_comp_time is None:
        self.casadi_comp_time = std_msgs.msg.Float64()
      if self.total_comp_time is None:
        self.total_comp_time = std_msgs.msg.Float64()
      if self.control_mode is None:
        self.control_mode = std_msgs.msg.String()
      if self.state_mode is None:
        self.state_mode = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.u0_mpc.x, _x.u0_mpc.y, _x.u0_mpc.z, _x.u0_dr.x, _x.u0_dr.y, _x.u0_dr.z,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.x_nom.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.x_nom.layout.dim.append(val1)
      start = end
      end += 4
      (self.x_nom.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.x_nom.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 40
      (_x.accel.x, _x.accel.y, _x.accel.z, _x.casadi_comp_time.data, _x.total_comp_time.data,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode.data = str[start:end].decode('utf-8')
      else:
        self.control_mode.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_mode.data = str[start:end].decode('utf-8')
      else:
        self.state_mode.data = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.Q_pos_factor, _x.Q_vel_factor, _x.R_factor, _x.QN_pos_factor, _x.QN_vel_factor, _x.Q_pos_tube_factor, _x.Q_vel_tube_factor, _x.R_tube_factor, _x.QN_pos_tube_factor, _x.QN_vel_tube_factor, _x.Q_pos_anc_factor, _x.Q_vel_anc_factor, _x.R_anc_factor, _x.T, _x.N, _x.control_dt,) = _get_struct_14did().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12d().pack(_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.u0_mpc.x, _x.u0_mpc.y, _x.u0_mpc.z, _x.u0_dr.x, _x.u0_dr.y, _x.u0_dr.z))
      length = len(self.x_nom.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.x_nom.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.x_nom.layout.data_offset))
      length = len(self.x_nom.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.x_nom.data.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.accel.x, _x.accel.y, _x.accel.z, _x.casadi_comp_time.data, _x.total_comp_time.data))
      _x = self.control_mode.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state_mode.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_14did().pack(_x.Q_pos_factor, _x.Q_vel_factor, _x.R_factor, _x.QN_pos_factor, _x.QN_vel_factor, _x.Q_pos_tube_factor, _x.Q_vel_tube_factor, _x.R_tube_factor, _x.QN_pos_tube_factor, _x.QN_vel_tube_factor, _x.Q_pos_anc_factor, _x.Q_vel_anc_factor, _x.R_anc_factor, _x.T, _x.N, _x.control_dt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.u0_mpc is None:
        self.u0_mpc = geometry_msgs.msg.Point()
      if self.u0_dr is None:
        self.u0_dr = geometry_msgs.msg.Point()
      if self.x_nom is None:
        self.x_nom = std_msgs.msg.Float64MultiArray()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.casadi_comp_time is None:
        self.casadi_comp_time = std_msgs.msg.Float64()
      if self.total_comp_time is None:
        self.total_comp_time = std_msgs.msg.Float64()
      if self.control_mode is None:
        self.control_mode = std_msgs.msg.String()
      if self.state_mode is None:
        self.state_mode = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.u0_mpc.x, _x.u0_mpc.y, _x.u0_mpc.z, _x.u0_dr.x, _x.u0_dr.y, _x.u0_dr.z,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.x_nom.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.x_nom.layout.dim.append(val1)
      start = end
      end += 4
      (self.x_nom.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.x_nom.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 40
      (_x.accel.x, _x.accel.y, _x.accel.z, _x.casadi_comp_time.data, _x.total_comp_time.data,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode.data = str[start:end].decode('utf-8')
      else:
        self.control_mode.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_mode.data = str[start:end].decode('utf-8')
      else:
        self.state_mode.data = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.Q_pos_factor, _x.Q_vel_factor, _x.R_factor, _x.QN_pos_factor, _x.QN_vel_factor, _x.Q_pos_tube_factor, _x.Q_vel_tube_factor, _x.R_tube_factor, _x.QN_pos_tube_factor, _x.QN_vel_tube_factor, _x.Q_pos_anc_factor, _x.Q_vel_anc_factor, _x.R_anc_factor, _x.T, _x.N, _x.control_dt,) = _get_struct_14did().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_14did = None
def _get_struct_14did():
    global _struct_14did
    if _struct_14did is None:
        _struct_14did = struct.Struct("<14did")
    return _struct_14did
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
