// Generated by gencpp from file reswarm_msgs/ReswarmUCBoundStatus.msg
// DO NOT EDIT!


#ifndef RESWARM_MSGS_MESSAGE_RESWARMUCBOUNDSTATUS_H
#define RESWARM_MSGS_MESSAGE_RESWARMUCBOUNDSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reswarm_msgs
{
template <class ContainerAllocator>
struct ReswarmUCBoundStatus_
{
  typedef ReswarmUCBoundStatus_<ContainerAllocator> Type;

  ReswarmUCBoundStatus_()
    : stamp()
    , uc_bound_finished(false)
    , unit_test_complete(false)  {
    }
  ReswarmUCBoundStatus_(const ContainerAllocator& _alloc)
    : stamp()
    , uc_bound_finished(false)
    , unit_test_complete(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _uc_bound_finished_type;
  _uc_bound_finished_type uc_bound_finished;

   typedef uint8_t _unit_test_complete_type;
  _unit_test_complete_type unit_test_complete;





  typedef boost::shared_ptr< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ReswarmUCBoundStatus_

typedef ::reswarm_msgs::ReswarmUCBoundStatus_<std::allocator<void> > ReswarmUCBoundStatus;

typedef boost::shared_ptr< ::reswarm_msgs::ReswarmUCBoundStatus > ReswarmUCBoundStatusPtr;
typedef boost::shared_ptr< ::reswarm_msgs::ReswarmUCBoundStatus const> ReswarmUCBoundStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace reswarm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'reswarm_msgs': ['/home/albee/workspaces/astrobee-ws-reswarm/freeflyer-reswarm/develop/reswarm_msgs/reswarm_msgs_matlab/matlab_msg_gen_ros1/glnxa64/src/reswarm_msgs/msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b2edd0b612536cbf5dddb2726f0dffa";
  }

  static const char* value(const ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b2edd0b612536cbULL;
  static const uint64_t static_value2 = 0xf5dddb2726f0dffaULL;
};

template<class ContainerAllocator>
struct DataType< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reswarm_msgs/ReswarmUCBoundStatus";
  }

  static const char* value(const ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"bool uc_bound_finished\n"
"bool unit_test_complete\n"
;
  }

  static const char* value(const ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.uc_bound_finished);
      stream.next(m.unit_test_complete);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReswarmUCBoundStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reswarm_msgs::ReswarmUCBoundStatus_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "uc_bound_finished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uc_bound_finished);
    s << indent << "unit_test_complete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unit_test_complete);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RESWARM_MSGS_MESSAGE_RESWARMUCBOUNDSTATUS_H
