// Generated by gencpp from file reswarm_msgs/ReswarmMsgMRPI.msg
// DO NOT EDIT!


#ifndef RESWARM_MSGS_MESSAGE_RESWARMMSGMRPI_H
#define RESWARM_MSGS_MESSAGE_RESWARMMSGMRPI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Bool.h>

namespace reswarm_msgs
{
template <class ContainerAllocator>
struct ReswarmMsgMRPI_
{
  typedef ReswarmMsgMRPI_<ContainerAllocator> Type;

  ReswarmMsgMRPI_()
    : K()
    , Au()
    , bu()
    , AZ()
    , bZ()
    , using_fallback_mrpi()  {
    }
  ReswarmMsgMRPI_(const ContainerAllocator& _alloc)
    : K(_alloc)
    , Au(_alloc)
    , bu(_alloc)
    , AZ(_alloc)
    , bZ(_alloc)
    , using_fallback_mrpi(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _K_type;
  _K_type K;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _Au_type;
  _Au_type Au;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _bu_type;
  _bu_type bu;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _AZ_type;
  _AZ_type AZ;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _bZ_type;
  _bZ_type bZ;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _using_fallback_mrpi_type;
  _using_fallback_mrpi_type using_fallback_mrpi;





  typedef boost::shared_ptr< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> const> ConstPtr;

}; // struct ReswarmMsgMRPI_

typedef ::reswarm_msgs::ReswarmMsgMRPI_<std::allocator<void> > ReswarmMsgMRPI;

typedef boost::shared_ptr< ::reswarm_msgs::ReswarmMsgMRPI > ReswarmMsgMRPIPtr;
typedef boost::shared_ptr< ::reswarm_msgs::ReswarmMsgMRPI const> ReswarmMsgMRPIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace reswarm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'reswarm_msgs': ['/home/albee/workspaces/astrobee-ws-reswarm/freeflyer-reswarm/develop/reswarm_msgs/reswarm_msgs_matlab/matlab_msg_gen_ros1/glnxa64/src/reswarm_msgs/msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58a198290d3ee8c3c6acb609374259e3";
  }

  static const char* value(const ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58a198290d3ee8c3ULL;
  static const uint64_t static_value2 = 0xc6acb609374259e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reswarm_msgs/ReswarmMsgMRPI";
  }

  static const char* value(const ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64MultiArray K\n"
"std_msgs/Float64MultiArray Au\n"
"std_msgs/Float64MultiArray bu\n"
"std_msgs/Float64MultiArray AZ\n"
"std_msgs/Float64MultiArray bZ\n"
"std_msgs/Bool using_fallback_mrpi\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.K);
      stream.next(m.Au);
      stream.next(m.bu);
      stream.next(m.AZ);
      stream.next(m.bZ);
      stream.next(m.using_fallback_mrpi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReswarmMsgMRPI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reswarm_msgs::ReswarmMsgMRPI_<ContainerAllocator>& v)
  {
    s << indent << "K: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.K);
    s << indent << "Au: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.Au);
    s << indent << "bu: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.bu);
    s << indent << "AZ: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.AZ);
    s << indent << "bZ: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.bZ);
    s << indent << "using_fallback_mrpi: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.using_fallback_mrpi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RESWARM_MSGS_MESSAGE_RESWARMMSGMRPI_H
