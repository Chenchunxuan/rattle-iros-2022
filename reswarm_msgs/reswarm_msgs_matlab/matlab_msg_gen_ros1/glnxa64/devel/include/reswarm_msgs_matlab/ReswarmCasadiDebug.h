// Generated by gencpp from file reswarm_msgs_matlab/ReswarmCasadiDebug.msg
// DO NOT EDIT!


#ifndef RESWARM_MSGS_MATLAB_MESSAGE_RESWARMCASADIDEBUG_H
#define RESWARM_MSGS_MATLAB_MESSAGE_RESWARMCASADIDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Float64MultiArray.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace reswarm_msgs_matlab
{
template <class ContainerAllocator>
struct ReswarmCasadiDebug_
{
  typedef ReswarmCasadiDebug_<ContainerAllocator> Type;

  ReswarmCasadiDebug_()
    : header()
    , wrench()
    , u0_mpc()
    , u0_dr()
    , x_nom()
    , accel()
    , casadi_comp_time()
    , total_comp_time()
    , control_mode()
    , state_mode()
    , Q_pos_factor(0.0)
    , Q_vel_factor(0.0)
    , R_factor(0.0)
    , QN_pos_factor(0.0)
    , QN_vel_factor(0.0)
    , Q_pos_tube_factor(0.0)
    , Q_vel_tube_factor(0.0)
    , R_tube_factor(0.0)
    , QN_pos_tube_factor(0.0)
    , QN_vel_tube_factor(0.0)
    , Q_pos_anc_factor(0.0)
    , Q_vel_anc_factor(0.0)
    , R_anc_factor(0.0)
    , T(0.0)
    , N(0)
    , control_dt(0.0)  {
    }
  ReswarmCasadiDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , wrench(_alloc)
    , u0_mpc(_alloc)
    , u0_dr(_alloc)
    , x_nom(_alloc)
    , accel(_alloc)
    , casadi_comp_time(_alloc)
    , total_comp_time(_alloc)
    , control_mode(_alloc)
    , state_mode(_alloc)
    , Q_pos_factor(0.0)
    , Q_vel_factor(0.0)
    , R_factor(0.0)
    , QN_pos_factor(0.0)
    , QN_vel_factor(0.0)
    , Q_pos_tube_factor(0.0)
    , Q_vel_tube_factor(0.0)
    , R_tube_factor(0.0)
    , QN_pos_tube_factor(0.0)
    , QN_vel_tube_factor(0.0)
    , Q_pos_anc_factor(0.0)
    , Q_vel_anc_factor(0.0)
    , R_anc_factor(0.0)
    , T(0.0)
    , N(0)
    , control_dt(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _u0_mpc_type;
  _u0_mpc_type u0_mpc;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _u0_dr_type;
  _u0_dr_type u0_dr;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _x_nom_type;
  _x_nom_type x_nom;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _casadi_comp_time_type;
  _casadi_comp_time_type casadi_comp_time;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _total_comp_time_type;
  _total_comp_time_type total_comp_time;

   typedef  ::std_msgs::String_<ContainerAllocator>  _control_mode_type;
  _control_mode_type control_mode;

   typedef  ::std_msgs::String_<ContainerAllocator>  _state_mode_type;
  _state_mode_type state_mode;

   typedef double _Q_pos_factor_type;
  _Q_pos_factor_type Q_pos_factor;

   typedef double _Q_vel_factor_type;
  _Q_vel_factor_type Q_vel_factor;

   typedef double _R_factor_type;
  _R_factor_type R_factor;

   typedef double _QN_pos_factor_type;
  _QN_pos_factor_type QN_pos_factor;

   typedef double _QN_vel_factor_type;
  _QN_vel_factor_type QN_vel_factor;

   typedef double _Q_pos_tube_factor_type;
  _Q_pos_tube_factor_type Q_pos_tube_factor;

   typedef double _Q_vel_tube_factor_type;
  _Q_vel_tube_factor_type Q_vel_tube_factor;

   typedef double _R_tube_factor_type;
  _R_tube_factor_type R_tube_factor;

   typedef double _QN_pos_tube_factor_type;
  _QN_pos_tube_factor_type QN_pos_tube_factor;

   typedef double _QN_vel_tube_factor_type;
  _QN_vel_tube_factor_type QN_vel_tube_factor;

   typedef double _Q_pos_anc_factor_type;
  _Q_pos_anc_factor_type Q_pos_anc_factor;

   typedef double _Q_vel_anc_factor_type;
  _Q_vel_anc_factor_type Q_vel_anc_factor;

   typedef double _R_anc_factor_type;
  _R_anc_factor_type R_anc_factor;

   typedef double _T_type;
  _T_type T;

   typedef int32_t _N_type;
  _N_type N;

   typedef double _control_dt_type;
  _control_dt_type control_dt;





  typedef boost::shared_ptr< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> const> ConstPtr;

}; // struct ReswarmCasadiDebug_

typedef ::reswarm_msgs_matlab::ReswarmCasadiDebug_<std::allocator<void> > ReswarmCasadiDebug;

typedef boost::shared_ptr< ::reswarm_msgs_matlab::ReswarmCasadiDebug > ReswarmCasadiDebugPtr;
typedef boost::shared_ptr< ::reswarm_msgs_matlab::ReswarmCasadiDebug const> ReswarmCasadiDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace reswarm_msgs_matlab

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'reswarm_msgs_matlab': ['/home/albee/workspaces/astrobee-ws-reswarm/freeflyer-reswarm/develop/reswarm_msgs/reswarm_msgs_matlab/matlab_msg_gen_ros1/glnxa64/src/reswarm_msgs_matlab/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71a2da2130cb8705dacf80ff5c94f1b9";
  }

  static const char* value(const ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71a2da2130cb8705ULL;
  static const uint64_t static_value2 = 0xdacf80ff5c94f1b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reswarm_msgs_matlab/ReswarmCasadiDebug";
  }

  static const char* value(const ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header  # header with time stamp\n"
"geometry_msgs/Wrench wrench  # force and torque\n"
"geometry_msgs/Point u0_mpc  # nominal mpc computation\n"
"geometry_msgs/Point u0_dr  # disturbance rejection computation\n"
"std_msgs/Float64MultiArray x_nom  # selected x0\n"
"geometry_msgs/Vector3 accel  # linear acceleration (wrench w/out estimated mass)\n"
"std_msgs/Float64 casadi_comp_time\n"
"std_msgs/Float64 total_comp_time\n"
"std_msgs/String control_mode\n"
"std_msgs/String state_mode\n"
"\n"
"# gains\n"
"float64 Q_pos_factor\n"
"float64 Q_vel_factor\n"
"float64 R_factor\n"
"float64 QN_pos_factor\n"
"float64 QN_vel_factor\n"
"\n"
"float64 Q_pos_tube_factor\n"
"float64 Q_vel_tube_factor\n"
"float64 R_tube_factor\n"
"float64 QN_pos_tube_factor\n"
"float64 QN_vel_tube_factor\n"
"\n"
"float64 Q_pos_anc_factor\n"
"float64 Q_vel_anc_factor\n"
"float64 R_anc_factor\n"
"\n"
"# timing info\n"
"float64 T\n"
"int32 N\n"
"float64 control_dt\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.wrench);
      stream.next(m.u0_mpc);
      stream.next(m.u0_dr);
      stream.next(m.x_nom);
      stream.next(m.accel);
      stream.next(m.casadi_comp_time);
      stream.next(m.total_comp_time);
      stream.next(m.control_mode);
      stream.next(m.state_mode);
      stream.next(m.Q_pos_factor);
      stream.next(m.Q_vel_factor);
      stream.next(m.R_factor);
      stream.next(m.QN_pos_factor);
      stream.next(m.QN_vel_factor);
      stream.next(m.Q_pos_tube_factor);
      stream.next(m.Q_vel_tube_factor);
      stream.next(m.R_tube_factor);
      stream.next(m.QN_pos_tube_factor);
      stream.next(m.QN_vel_tube_factor);
      stream.next(m.Q_pos_anc_factor);
      stream.next(m.Q_vel_anc_factor);
      stream.next(m.R_anc_factor);
      stream.next(m.T);
      stream.next(m.N);
      stream.next(m.control_dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReswarmCasadiDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reswarm_msgs_matlab::ReswarmCasadiDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    s << indent << "u0_mpc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.u0_mpc);
    s << indent << "u0_dr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.u0_dr);
    s << indent << "x_nom: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.x_nom);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "casadi_comp_time: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.casadi_comp_time);
    s << indent << "total_comp_time: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.total_comp_time);
    s << indent << "control_mode: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.control_mode);
    s << indent << "state_mode: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.state_mode);
    s << indent << "Q_pos_factor: ";
    Printer<double>::stream(s, indent + "  ", v.Q_pos_factor);
    s << indent << "Q_vel_factor: ";
    Printer<double>::stream(s, indent + "  ", v.Q_vel_factor);
    s << indent << "R_factor: ";
    Printer<double>::stream(s, indent + "  ", v.R_factor);
    s << indent << "QN_pos_factor: ";
    Printer<double>::stream(s, indent + "  ", v.QN_pos_factor);
    s << indent << "QN_vel_factor: ";
    Printer<double>::stream(s, indent + "  ", v.QN_vel_factor);
    s << indent << "Q_pos_tube_factor: ";
    Printer<double>::stream(s, indent + "  ", v.Q_pos_tube_factor);
    s << indent << "Q_vel_tube_factor: ";
    Printer<double>::stream(s, indent + "  ", v.Q_vel_tube_factor);
    s << indent << "R_tube_factor: ";
    Printer<double>::stream(s, indent + "  ", v.R_tube_factor);
    s << indent << "QN_pos_tube_factor: ";
    Printer<double>::stream(s, indent + "  ", v.QN_pos_tube_factor);
    s << indent << "QN_vel_tube_factor: ";
    Printer<double>::stream(s, indent + "  ", v.QN_vel_tube_factor);
    s << indent << "Q_pos_anc_factor: ";
    Printer<double>::stream(s, indent + "  ", v.Q_pos_anc_factor);
    s << indent << "Q_vel_anc_factor: ";
    Printer<double>::stream(s, indent + "  ", v.Q_vel_anc_factor);
    s << indent << "R_anc_factor: ";
    Printer<double>::stream(s, indent + "  ", v.R_anc_factor);
    s << indent << "T: ";
    Printer<double>::stream(s, indent + "  ", v.T);
    s << indent << "N: ";
    Printer<int32_t>::stream(s, indent + "  ", v.N);
    s << indent << "control_dt: ";
    Printer<double>::stream(s, indent + "  ", v.control_dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RESWARM_MSGS_MATLAB_MESSAGE_RESWARMCASADIDEBUG_H
